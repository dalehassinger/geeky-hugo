

























































































[{"categories":["vExpert"],"contents":"vExpert 2020 - 2022   I am very proud to be part of the VMware vExpert program. This is the third year that I was accepted into the program. One part of the vExpert program that I think is great is that the program recognizes people for sharing their knowledge and \u0026ldquo;Giving Back\u0026rdquo;. A person selected into the vExpert programs is someone that likes to share, wants to make themselves and everyone around them smarter.\nI think that 2021 was one of my most productive years and one that I advanced my own personal knowledge the most.\nHighlights of 2021 to get accepted into the vExpert Program:  VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware “vExpert Cloud Management Community” on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM “Right Sizing” I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Profile Interview that will be released in 2022. I shared a vRealize Operations “Right Sizing” Dashboard on the code.vmware.com web site.   What is the VMware vExpert Program? Program Overview The VMware vExpert program is VMware\u0026rsquo;s global evangelism and advocacy program. The program is designed to put VMware\u0026rsquo;s marketing resources towards your advocacy efforts. Promotion of your articles, exposure at our global events, co-op advertising, traffic analysis, and early access to beta programs and VMware\u0026rsquo;s roadmap. The awards are for individuals, not companies, and last for one year. Employees of both customers and partners can receive the awards. In the application, we consider various community activities from the previous year as well as the current year\u0026rsquo;s (only for 2nd half applications) activities in determining who gets awards. We look to see that not only were you active but are still active in the path you chose to apply for.\nCriteria If you are interested in becoming a vExpert the criteria is simple. We are looking for IT Professionals who are sharing their VMware knowledge and contributing that back to the community. The term \u0026ldquo;giving back\u0026rdquo; is defined as going above and beyond your day job. There are several ways to share your knowledge and engage with the community. Some of those activities are blogging, book authoring, magazine articles, CloudCred task writing, active in Facebook groups, forum (VMTN as well as other non VMware) platforms, public speaking, VMUG leadership, videos and so on.\n Thanks: I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser.\nSpecial Thanks to David Kruse for getting me started with vRA.\nSpecial Thanks to some past co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2).\nList of Bloggers that I follow and have learned a lot by them \u0026ldquo;Giving Back\u0026rdquo;: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf.\nSpecial Thanks to the person that gave me my first Job in IT: David Cornelius\nand anyone else that helped me in my journey called my career\u0026hellip;\n I have learned a lot from the vCommunity. I want to use this blog as a way for me to \u0026ldquo;give back\u0026rdquo;. If one person finds anything I post helpful I will consider my efforts successful. I am always open to talking to any person, group or organization about what I do with VMware products. Please reach out to me if you ever want to have a discussion.\nEmail: Dale.Hassinger@vCrocs.info\nLocation: Dillsburg, PA\n\u0026ldquo;9 - 5 pays the bills, 5 - 10 advances your career\u0026rdquo; ","date":"February 22, 2022","image":"https://dalehassinger.github.io/geeky-hugo/images/post/vexpert-2022-01_huea633dfc62497ad674470427f21ef8c9_70292_650x0_resize_box_3.png","permalink":"/geeky-hugo/blog/vexpert-2022/","title":"vExpert 2022"},{"categories":["SaltStack Config"],"contents":" Part 8: Pouring the salt grains    My previous posts about grain data were to show how to add minion grain data during the creation of a new server with vRA using PowerShell. This post I want to show how I\u0026rsquo;m going to maintain the grain data that is not default out of the box grain data.\n Windows Server grain data not available out of the of box that I want to add to every minion AND make sure the grain data stays up to date:\n Windows Server Features | Roles Windows Server Installed Software Windows Server Running Services   These are the steps that I use to maintain custom grain data with a Windows Server:\n Create a PowerShell Script that can run locally on a minion. Add the script to the SaltStack Config File Manager. Use salt-call to run salt.functions locally on a minion. See screen shot and my code examples below. Create a SaltStack Config Job to execute the PowerShell Script remotely on the minion. See Screen Shot. Create a SaltStack Config Schedule to run the job that you create. The job can run every day, once a week, every 4 hours. Whatever makes sense for your use case. See Screen Shot.   If you want to run a script locally on a minion and use salt functions that is where you use the salt-call command. After you learn the salt-functions and are logged into a Windows Server locally, you can still use salt commands by using salt-call.\n# --- example code salt-call --version salt-call test.ping # --- Show Disk Usage salt-call disk.usage # --- Show Installed Features|Roles salt-call win_servermanager.list_installed # --- Show Installed Sofwtare salt-call pkg.list_pkgs Link to salt-call Documentation\n Step 1 - Add script to SaltStack Config File Manager: See code examples below to add Windows Server Features|Roles, Installed Software, and Runnings Services as grain data.\nClick Here to see Larger Image of Screen Shot\nStep 2 - Create SaltStack Config Job:  Click Here to see Larger Image of Screen Shot\nStep 3 - Create SaltStack Config Schedule:  Click Here to see Larger Image of Screen Shot\n Code Examples: - Add Windows Features | Roles as grain data: \u0026lt;# .SYNOPSISThis Script is used to Get Windows Servers Features and add as Grain Data .DESCRIPTIONWindows Servers Features .PARAMETERNo Parameters .INPUTSNo inputs .OUTPUTSsalt grain data .NOTESVersion: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLEN/A #\u0026gt; # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Features Installed # --- Delete existing grains features data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Feature force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand $saltCommand = \u0026#39;salt-call win_servermanager.list_installed --output=json\u0026#39; #$saltCommand # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results $features = $results | ConvertFrom-Json #$features $features = $features.local #$features $features = $features -split(\u0026#34;:\u0026#34;) $features = $features -split(\u0026#34;;\u0026#34;) $features = $features -replace(\u0026#34;@{\u0026#34;,\u0026#34;\u0026#34;) $features = $features -replace(\u0026#34;}\u0026#34;,\u0026#34;\u0026#34;) $features = $features.trim() $features = $features -replace(\u0026#34;=\u0026#34;,\u0026#34; | \u0026#34;) $features = $features | Sort-Object #$features foreach($feature in $features){ # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Feature \u0026#34;\u0026#39; + $feature + \u0026#39;\u0026#34;\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # ----- [ End of Code ] ---------------------------------------------------------------------------  - Add Windows Server Installed Packages|Software as grain data: \u0026lt;# .SYNOPSISThis Script is used to Get Windows Installed Packages and add as Grain Data .DESCRIPTIONWindows Servers Installed Packages .PARAMETERNo Parameters .INPUTSNo inputs .OUTPUTSsalt grain data .NOTESVersion: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLEN/A #\u0026gt; # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Installed Packages|Software # --- Delete existing grains features data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Installed_Software force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand $saltCommand = \u0026#39;salt-call pkg.list_pkgs --output=json\u0026#39; #$saltCommand # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results $installedPackages = $results | ConvertFrom-Json $installedPackages = $installedPackages.local $installedPackages = $installedPackages -split(\u0026#34;:\u0026#34;) $installedPackages = $installedPackages -split(\u0026#34;;\u0026#34;) $installedPackages = $installedPackages -replace(\u0026#34;@{\u0026#34;,\u0026#34;\u0026#34;) $installedPackages = $installedPackages -replace(\u0026#34;}\u0026#34;,\u0026#34;\u0026#34;) $installedPackages = $installedPackages.trim() $installedPackages = $installedPackages -replace(\u0026#34;=\u0026#34;,\u0026#34; | \u0026#34;) $installedPackages = $installedPackages | Sort-Object #$installedPackages foreach($installedPackage in $installedPackages){ # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Installed_Software \u0026#34;\u0026#39; + $installedPackage + \u0026#39;\u0026#34;\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # ----- [ End of Code ] ---------------------------------------------------------------------------  - Add Windows Running Services as grain data: \u0026lt;# .SYNOPSISThis Script is used to Get Windows Servers Running Services and add as Grain Data .DESCRIPTIONWindows Servers Running Services .PARAMETERNo Parameters .INPUTSNo inputs .OUTPUTSsalt grain data .NOTESVersion: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLEN/A #\u0026gt; # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Running Services # --- Delete existing grains running services data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Services_Running force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Get all Running Services $serviceNames = Get-Service | Where-Object {$_.Status -eq \u0026#39;Running\u0026#39;} # --- Create Array $servicesGrains = @() # --- Add Service data to the array foreach($serviceName in $serviceNames){ $grainString = $serviceName.Name + \u0026#39; | \u0026#39; + $serviceName.DisplayName $servicesGrains = $servicesGrains + $grainString } # End Foreach #$servicesGrains # --- Add Windows Running Services as Grain Data foreach($servicesGrain in $servicesGrains){ # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Services_Running \u0026#34;\u0026#39; + $servicesGrain + \u0026#39;\u0026#34;\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # ----- [ End of Code ] ---------------------------------------------------------------------------  SaltStack Config Target using Windows Server Running Service (SQL Server):  Click Here to see Larger Image of Screen Shot\n Lessons Learned:\n Windows Server Features|Roles make a great way to target minions. Windows Server installed software also makes a great way to target minions. Windows Server Running Services is a good way to target minions. If you add custom grain data when the server is created you also need a way to maintain the grain data so it stays up to date and is current.   Salt Links I found to be very helpful:\n SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config    When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"February 12, 2022","image":"https://dalehassinger.github.io/geeky-hugo/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/geeky-hugo/blog/saltstack-config-part-08/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 8"},{"categories":["SaltStack Config"],"contents":" Part 7:     The more I use VMware vRealize SaltStack Config as a Windows Server Admin the more I see the importance of having grain information added to the minion to be able to target servers many different ways. During a recent discussion it was suggested to have the ability to target Windows Server minions by the Windows server Features|Roles that were installed on the server and by which software was installed on a server. There are built-in salt functions to get Features|Roles and installed software. Here is the code I used to get the information and add to the minion grain file using PowerShell.  This will allow you to create targets to:\n minions with specific VMware Tools Versions minion with Web Server Feature|Role enabled etc\u0026hellip;   Salt Functions: # The POSH-SSH PowerShell module MUST be installed to use this code. # Name of Minion that you want to add grain data $minion = \u0026#39;DBH-210\u0026#39; # ----- [ SSH Connection to SalStack Config Server ] ------------------------------------ Write-Host \u0026#39;Making SSH Connection to SaltStack Config Server...\u0026#39; $Server = \u0026#39;ssc.vCROCS.local\u0026#39; $userName = \u0026#39;root\u0026#39; $Password = \u0026#39;VMware#1\u0026#39; # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $Password -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword $Params = @{ \u0026#34;ComputerName\u0026#34; = $Server \u0026#34;Credential\u0026#34; = $creds } # End Params # SSH Connection to SaltStack Server $sshSession = Get-SSHSession if($sshSession.SessionId -eq 0){ Write-Host \u0026#39;SSH Connection to SSC Server already completed\u0026#39; } # End If else{ Write-Host \u0026#39;Creating new SSH Connection to SSC Server\u0026#39; New-SSHSession @Params } # End Else # ----- [ Start Adding Grain Data ] --------------------------------------------------------------------------- # ----- [ Minion Get Windows Server Features|Roles Installed ] ------------------------------------ Write-Host \u0026#39;Getting Windows Server Features|Roles Installed...\u0026#39; $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; win_servermanager.list_installed --output=json\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $features = $results.Output $features = $results.Output | ConvertFrom-Json $features = $features.PsObject.Properties.Value $features = $features | ConvertTo-Xml # Append Each Feature|Role information to grains Write-Host \u0026#39;Appending Windows Server Features|Roles Installed to grains...\u0026#39; $grainsKey = \u0026#39;vCROCS_Windows_Feature\u0026#39; foreach($feature in $features.Objects.Object.Property){ $grainsValue = $feature.Name + \u0026#39; | \u0026#39; + $feature.\u0026#39;#text\u0026#39; # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params } # End Foreach # ----- [ Minion Get Windows Server Installed Software ] ------------------------------------ Write-Host \u0026#39;Getting Windows Server Installed Software...\u0026#39; # Get Installed Software $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; pkg.list_pkgs --output=json\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $installedPackages = $results.Output $installedPackages = $installedPackages | ConvertFrom-Json $installedPackages = $installedPackages.PsObject.Properties.Value $installedPackages = $installedPackages | ConvertTo-Xml $grainsKey = \u0026#39;vCROCS_Windows_Installed_Software\u0026#39; # Append Windows Server Installed Software to grains Write-Host \u0026#39;Appending Windows Server Installed Software to grains...\u0026#39; foreach($installedPackage in $installedPackages.Objects.Object.Property){ $grainsValue = $installedPackage.Name + \u0026#39; | \u0026#39; + $installedPackage.\u0026#39;#text\u0026#39; # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params } # End Foreach # ----- [ Add a Date that grains last updated ] ---------------------------------------------------------------- $grainsupdateDate = Get-Date $grainsValue = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy\u0026#34;) $grainsKey = \u0026#39;vCROCS_last_grains_update\u0026#39; # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params # ----- [ End Adding Grain Data ] --------------------------------------------------------------------------- # ----- [ Sync minion Grain Data ] ------------------------------------------------------------------ Write-Host \u0026#39;Syncing Minion Grain Data...\u0026#39; # Sync Grains Data $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; saltutil.sync_grains\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params # ----- [ Disconnect from SaltStack Config Server ] ------------------------------------------------------------------ Write-Host \u0026#39;Disconnecting from SaltStack Config Server...\u0026#39; Remove-SSHSession -SessionId 0 # ----- [ End of Code ] ---------------------------------------------------------------------------  Example grains file after running script The default location of the grains file is in directory “C:\\salt\\conf\u0026quot;\nvCROCS_Windows_Feature: - FileAndStorage-Services | File and Storage Services - NET-Framework-45-Core | .NET Framework 4.7 - NET-Framework-45-Features | .NET Framework 4.7 Features - NET-Framework-Core | .NET Framework 3.5 (includes .NET 2.0 and 3.0) - NET-Framework-Features | .NET Framework 3.5 Features - NET-WCF-Services45 | WCF Services - NET-WCF-TCP-PortSharing45 | TCP Port Sharing - PowerShell | Windows PowerShell 5.1 - PowerShell-ISE | Windows PowerShell ISE - PowerShellRoot | Windows PowerShell - PowerShell-V2 | Windows PowerShell 2.0 Engine - RSAT | Remote Server Administration Tools - RSAT-Feature-Tools | Feature Administration Tools - RSAT-SNMP | SNMP Tools - SNMP-Service | SNMP Service - SNMP-WMI-Provider | SNMP WMI Provider - Storage-Services | Storage Services - System-DataArchiver | System Data Archiver - Telnet-Client | Telnet Client - WoW64-Support | WoW64 Support - XPS-Viewer | XPS Viewer vCROCS_Windows_Installed_Software: - Microsoft Silverlight | 5.1.50918.0 - Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.40664 | 12.0.40664.0 - Microsoft Visual C++ 2013 x64 Additional Runtime - 12.0.40664 | 12.0.40664 - Microsoft Visual C++ 2013 x64 Minimum Runtime - 12.0.40664 | 12.0.40664 - Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.30.30704 | 14.30.30704.0 - Microsoft Visual C++ 2015-2022 Redistributable (x86) - 14.30.30704 | 14.30.30704.0 - Microsoft Visual C++ 2022 X64 Additional Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X64 Minimum Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X86 Additional Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X86 Minimum Runtime - 14.30.30704 | 14.30.30704 - Salt Minion 3003.1 (Python 3) | 3003.1 - UniversalForwarder | 8.2.4.0 - VMware Tools | 11.3.5.18557794 vCROCS_last_grains_update: - 01/14/2022  SaltStack Target using Windows Server Software Installed: Show all minions that have VMware Tools | 11.3.5.18557794 installed\n Click Here to see Larger Image of Screen Shot\n Lessons Learned:\n Windows Server Features|Roles make a great way to target minions. Windows Server installed software also makes a great way to target minions.   Salt Links I found to be very helpful:\n SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config    When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"January 14, 2022","image":"https://dalehassinger.github.io/geeky-hugo/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/geeky-hugo/blog/saltstack-config-part-07/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7"},{"categories":null,"contents":"Links to some of my favorite Bloggers and Content: Bloggers:  Brock Peterson - vRealize Master LucD - PowerShell Master William Lam - VMware Master Yellow Bricks  VMware:  VMware Operations Management Book - Great Book! code.VMware.com - Samples/Resources Learn vRealize Automation Learn SaltStack Config blogs.VMware.com PowerShell PowerCLI VMware PowerCLI Cmdlets by Product vRealize Automation vRealize Operations vRealize Log Insight ports.VMware.com - Good Link when you live in a Zero trust environment  Podcasts:  IT Reality Podcast The Hacks - Powered By SaltStack Virtually Speaking Podcast  ","date":"January 1, 2020","image":"https://dalehassinger.github.io/geeky-hugo/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/geeky-hugo/blog/links/","title":"Favorite Links"},{"categories":null,"contents":" My current focus is Enterprise Automation, Monitoring and Logging. I am using VMware vRealize Automation and SaltStack Config to complete server builds, software installs, schedule VM snap shots, Microsoft 365 automation, Citrix Management, Automate Data Center Flips, Server Decommissions, and many other Day 2 processes… For monitoring I use vRealize Operations for the “Single Pane of Glass” experience. I also use vRealize Log Insight for logging and LCM (Life Cycle Manager) for installing all the vRealize Products.\nAlmost all the code I write to complete the Automation that I create is done with PowerShell. The reason I choose to use PowerShell is because to do Automation with VMware products they have released their product PowerCLI, which is built on top of PowerShell. There hasn’t been anything that I wanted to Automate that I haven’t been able to do with PowerShell. To do remote Citrix management also works very well using PowerShell.\nI have also started to do Automation with Azure. I am using PowerShell to create VMs and SaltStack Config to complete the configuration management, install software and maintain state.\n I have learned a lot from the vCommunity, Powershell and PowerCLI web sites. I want to use this blog as a way for me to give back. If one person finds anything I post helpful, I will consider my efforts successful.\nThe code that I have shared I use with vRealize Automation Cloud Templates/Catalog Items and everyday VMware Admin functions. Everyday I learn something new. If I think it should be shared I will write a blog about it. Check back often to see what I am doing next.\n ","date":"January 1, 1","image":"https://dalehassinger.github.io/geeky-hugo/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/geeky-hugo/about/","title":"About Dale Hassinger"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://dalehassinger.github.io/geeky-hugo/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/geeky-hugo/contact/","title":"Contact Page"},{"categories":null,"contents":"Privacy Policy Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi amet, ultrices scelerisue cras. Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsum lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis rutrum elit vestibululm ipsum. Arcu fringilla duis vitae mos dsdllis duicras interdum purus cursus massa metus. Acc umsan felaais, egsdvet nisi, viverra turpis fermentum sit suspf bafedfb ndisse fermentum consectetur. Facilisis feugiat trisique orci tempor sed masd fbsssa tristique ultrices sodales. Augue est sapien elementum facilisis. Enim tincidnt cras interdum purus ndisse. morbi quis nunc.\nMore Privacy Policy Et dolor placerat tempus risus nunc urna, nunc a. Mattis viverra ut sapidaaen enim sed tortor. Mattis gravida fusce cras interdum purus cursus massa metus. Acc umsan felaais, eget nisi, viverra turpis fermentum sit suspf bafedfb ndisse. morbi quis nunc, at arcu quam facilisi. In in lacus aliquam dictum sagittis morbi odio. Et magnis cursus sem sed condimentum. Nibh non potenti ac amsdfet Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsuasdm lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis ndisse. morbi quis nunc, at arcu quam facilisi ndisse. morbi quis nunc, at arcu quam facilisi\nEt dolor placerat tempus risus nunc urna, nunc a. Mattis viverra ut sapidaaen enim sed tortor. Mattis gravida fusce cras interdum purus cursus massa metus. Acc umsan felaais, eget nisi, viverra turpis fermentum sit suspf bafedfb ndisse. morbi quis nunc, at arcu quam facilisi. In in lacus aliquam dictum sagittis morbi odio. Et magnis cursus sem sed condimentum. Nibh non potenti ac amsdfet Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsuasdm lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis ndisse. morbi quis nunc, at arcu quam facilisi ndisse. morbi quis nunc, at arcu quam facilisi\n","date":"January 1, 1","image":"https://dalehassinger.github.io/geeky-hugo/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/geeky-hugo/privacy-policy/","title":"Privacy Policy"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://dalehassinger.github.io/geeky-hugo/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/geeky-hugo/search/","title":"Search Result"}]